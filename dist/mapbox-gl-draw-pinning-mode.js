!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?module.exports=r(require("@mapbox/mapbox-gl-draw/src/modes/simple_select")):"function"==typeof define&&define.amd?define(["@mapbox/mapbox-gl-draw/src/modes/simple_select"],r):(e="undefined"!=typeof globalThis?globalThis:e||self).mapboxGlDrawPinningMode=r(e.MapboxDraw.modes.simple_select)}(this,(function(e){"use strict";function r(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var t=r(e);const o="Feature",n="Point";var i={enable(e){setTimeout((()=>{e.map&&e.map.doubleClickZoom&&e._ctx&&e._ctx.store&&e._ctx.store.getInitialConfigValue&&e._ctx.store.getInitialConfigValue("doubleClickZoom")&&e.map.doubleClickZoom.enable()}),0)},disable(e){setTimeout((()=>{e.map&&e.map.doubleClickZoom&&e.map.doubleClickZoom.disable()}),0)}};function a(e,r,t){if(!(o=t=t||{})||o.constructor!==Object)throw new Error("options is invalid");var o,n=t.bbox,i=t.id;if(void 0===e)throw new Error("geometry is required");if(r&&r.constructor!==Object)throw new Error("properties must be an Object");n&&l(n),i&&function(e){if(!e)throw new Error("id is required");if(-1===["string","number"].indexOf(typeof e))throw new Error("id must be a number or a string")}(i);var a={type:"Feature"};return i&&(a.id=i),n&&(a.bbox=n),a.properties=r||{},a.geometry=e,a}function s(e){return!isNaN(e)&&null!==e&&!Array.isArray(e)}function l(e){if(!e)throw new Error("bbox is required");if(!Array.isArray(e))throw new Error("bbox must be an Array");if(4!==e.length&&6!==e.length)throw new Error("bbox must be an Array of 4 or 6 numbers");e.forEach((function(e){if(!s(e))throw new Error("bbox must only contain numbers")}))}function u(e){l(e);var r=Number(e[0]),t=Number(e[1]),o=Number(e[2]),n=Number(e[3]);if(6===e.length)throw new Error("@turf/bbox-polygon does not support BBox with 6 positions");var i=[r,t];return function(e,r,t){if(!e)throw new Error("coordinates is required");for(var o=0;o<e.length;o++){var n=e[o];if(n.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var i=0;i<n[n.length-1].length;i++){if(0===o&&0===i&&!s(n[0][0])||!s(n[0][1]))throw new Error("coordinates must contain numbers");if(n[n.length-1][i]!==n[0][i])throw new Error("First and last Position are not equivalent.")}}return a({type:"Polygon",coordinates:e},r,t)}([[i,[o,t],[o,n],[r,n],i]])}function c(e,r,t){if(null!==e)for(var o,n,i,a,s,l,u,f,d=0,h=0,g=e.type,p="FeatureCollection"===g,m="Feature"===g,b=p?e.features.length:1,w=0;w<b;w++){s=(f=!!(u=p?e.features[w].geometry:m?e.geometry:e)&&"GeometryCollection"===u.type)?u.geometries.length:1;for(var y=0;y<s;y++){var v=0,x=0;if(null!==(a=f?u.geometries[y]:u)){l=a.coordinates;var E=a.type;switch(d=!t||"Polygon"!==E&&"MultiPolygon"!==E?0:1,E){case null:break;case"Point":r(l,h,w,v,x),h++,v++;break;case"LineString":case"MultiPoint":for(o=0;o<l.length;o++)r(l[o],h,w,v,x),h++,"MultiPoint"===E&&v++;"LineString"===E&&v++;break;case"Polygon":case"MultiLineString":for(o=0;o<l.length;o++){for(n=0;n<l[o].length-d;n++)r(l[o][n],h,w,v,x),h++;"MultiLineString"===E&&v++,"Polygon"===E&&x++}"Polygon"===E&&v++;break;case"MultiPolygon":for(o=0;o<l.length;o++){for("MultiPolygon"===E&&(x=0),n=0;n<l[o].length;n++){for(i=0;i<l[o][n].length-d;i++)r(l[o][n][i],h,w,v,x),h++;x++}v++}break;case"GeometryCollection":for(o=0;o<a.geometries.length;o++)c(a.geometries[o],r,t);break;default:throw new Error("Unknown Geometry Type")}}}}}function f(e){var r=[];return c(e,(function(e){r.push(e)})),r}function d(e){if(!e)throw new Error("obj is required");var r;if(e.length?r=e:e.coordinates?r=e.coordinates:e.geometry&&e.geometry.coordinates&&(r=e.geometry.coordinates),r)return h(r),r;throw new Error("No valid coordinates")}function h(e){if(e.length>1&&s(e[0])&&s(e[1]))return!0;if(Array.isArray(e[0])&&e[0].length)return h(e[0]);throw new Error("coordinates must only contain numbers")}function g(e,r,t){if("object"!=typeof(t=t||{}))throw new Error("options is invalid");var o=t.ignoreBoundary;if(!e)throw new Error("point is required");if(!r)throw new Error("polygon is required");var n=function(e){if(!e)throw new Error("obj is required");var r=d(e);if(r.length>1&&s(r[0])&&s(r[1]))return r;throw new Error("Coordinate is not a valid Point")}(e),i=d(r),a=r.geometry?r.geometry.type:r.type,l=r.bbox;if(l&&!1===function(e,r){return r[0]<=e[0]&&r[1]<=e[1]&&r[2]>=e[0]&&r[3]>=e[1]}(n,l))return!1;"Polygon"===a&&(i=[i]);for(var u=0,c=!1;u<i.length&&!c;u++)if(p(n,i[u][0],o)){for(var f=!1,h=1;h<i[u].length&&!f;)p(n,i[u][h],!o)&&(f=!0),h++;f||(c=!0)}return c}function p(e,r,t){var o=!1;r[0][0]===r[r.length-1][0]&&r[0][1]===r[r.length-1][1]&&(r=r.slice(0,r.length-1));for(var n=0,i=r.length-1;n<r.length;i=n++){var a=r[n][0],s=r[n][1],l=r[i][0],u=r[i][1];if(e[1]*(a-l)+s*(l-e[0])+u*(e[0]-a)==0&&(a-e[0])*(l-e[0])<=0&&(s-e[1])*(u-e[1])<=0)return!t;s>e[1]!=u>e[1]&&e[0]<(l-a)*(e[1]-s)/(u-s)+a&&(o=!o)}return o}const{onMouseDown:m,onMouseUp:b,onDrag:w,fireUpdate:y,clickAnywhere:v,...x}=t.default,E={originalOnMouseDown:m,originalOnMouseUp:b,originalOnDrag:w,originalFireUpdate:y,originalClickAnywhere:v,...x};return E.onSetup=function(){const e=this.getSelected();this.clearSelectedFeatures(),i.disable(this);const r={map:this.map,draw:this._ctx.api,selectedFeatures:e,selectedPointID:null},t=()=>{const e=(()=>{const e=r.map,t=e.getCanvas(),o=t.width,n=t.height,i=(e.unproject([0,0]).toArray(),e.unproject([o,0]).toArray());e.unproject([o,n]).toArray();return u([e.unproject([0,n]).toArray(),i].flat())})(),t=[],i=r.draw.getAll();i.features=i.features.filter((r=>f(r).some(((r,t)=>g(r,e)))));const a=this;i.features.forEach((e=>{f(e).forEach(((r,i)=>{const a=t.findIndex((e=>{const t=e.vertex.coordinates;return t[0]===r[0]&&t[1]===r[1]}));-1!==a?t[a].vertex.properties.featureIDs.push([e.id,i]):t.push({vertex:this.newFeature({type:o,properties:{featureIDs:[[e.id,i]]},id:e.id+"-"+i,geometry:{type:n,coordinates:r}})})}).bind(a))})),t.forEach((e=>this.addFeature(e.vertex)).bind(this)),r.features=i,r.vertices=t,r.points=t};return t(),r.moveendCallback=t,this.map.on("moveend",t),r},E.fireUpdate=function(){},E.onMouseDown=function(e,r){r.featureTarget&&(e.selectedPointID=r.featureTarget.properties.id),this.originalOnMouseDown.call(this,e,r)},E.update=function(e,r){if(!e.selectedPointID)return;const t=this.getSelected()[0];t.properties.featureIDs.forEach((([r,o])=>{const n=e.draw.get(r);n.geometry.coordinates[0][o]=t.coordinates,e.draw.add(n)}))},E.onMouseUp=function(e,r){e.selectedPointID=null,this.update(e,r),this.originalOnMouseUp.call(this,e,r)},E.onDrag=function(e,r){this.originalOnDrag.call(this,e,r),this.update(e,r)},E.clickAnywhere=function(e){this.onStop(e),this.originalClickAnywhere(e)},E.onStop=function(e){this.map.off("moveend",e.moveendCallback),this.deleteFeature(e.vertices.map((({vertex:e})=>e.id)),{silent:!0}),i.enable(this)},E}));
